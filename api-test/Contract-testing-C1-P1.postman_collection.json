{
	"info": {
		"_postman_id": "91795417-e9e9-431f-8ec6-44b013ae4b88",
		"name": "Contract-testing-C1-P1",
		"description": "# 🤝 Get started here\n\nThis template demonstrates how to set up contract tests to ensure that two separate systems are compatible and can communicate with one another.\n\nIt contains requests and test scripts for validating the data returned by an API, including the different aspects of a response, query parameters, and form data.\n\n## 🔖 **How to use this collection**\n\n**Step 1:** Send the sample requests and view the response and test results.\n\n**Step 2:** Replace the sample request URLs with your desired API endpoints.\n\n**Step 3:** Customize the tests in the \"Tests\" tab if needed. Don't forget to save your changes.\n\n### ℹ️ Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)\n\n[  \n](https://postman.postman.co/documentation/24552533-5bead607-0197-4e1d-87d4-3160bc7631c1?entity=&branch=&version=)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1453931",
		"_collection_link": "https://www.postman.com/red-firefly-245852/workspace/postman-workshop/collection/1453931-91795417-e9e9-431f-8ec6-44b013ae4b88?action=share&source=collection_link&creator=1453931"
	},
	"item": [
		{
			"name": "Provider",
			"item": [
				{
					"name": "Verified by provider => P1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate that the response code should be 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"// Validate that the response has an arg object",
									"pm.test(\"Response to have 'arg' object\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('args');",
									"});",
									"",
									"// Validate that the response has headers object",
									"pm.test(\"Response to have 'headers' object\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('headers');",
									"});",
									"",
									"// Validate that the response has url property",
									"pm.test(\"Response to have 'url' property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('url');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "foo1",
									"value": "bar1"
								},
								{
									"key": "foo2",
									"value": "bar2"
								}
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				}
			]
		},
		{
			"name": "Consumer",
			"item": [
				{
					"name": "Check for valid query params by consumer => C1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate that the response code should be 200\r",
									"pm.test(\"Response Code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Run validations on response headers like Content-Type\r",
									"pm.test(\"Content-Type should be JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"// The response body, including individual attributes can be evaluated for correctness\r",
									"pm.test(\"`args` should contain the correct query params\", function () {\r",
									"    pm.expect(json.args).to.be.an('object');\r",
									"    pm.expect(json.args.foo).to.eql('bar');\r",
									"    pm.expect(json.args.baz).to.eql('value');\r",
									"});\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/get?foo=bar&baz=value",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "foo",
									"value": "bar"
								},
								{
									"key": "baz",
									"value": "value"
								}
							]
						},
						"description": "The tests in the request validate the response code and the data returned in the response is the same as the one being sent."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://postman-echo.com"
		}
	]
}