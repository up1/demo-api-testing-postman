{
	"info": {
		"_postman_id": "d59c0488-4858-473c-ac9c-e8e2228a0de5",
		"name": "day2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1453931",
		"_collection_link": "https://www.postman.com/red-firefly-245852/workspace/postman-workshop/collection/1453931-d59c0488-4858-473c-ac9c-e8e2228a0de5?action=share&source=collection_link&creator=1453931"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login => Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Login => Response body has the required properties\", function () {",
							"    var responseJSON = pm.response.json();",
							"    pm.expect(responseJSON).to.have.property('token');",
							"",
							"",
							"    pm.collectionVariables.set(\"token\", responseJSON.token);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{TARGET_URL}}/login",
					"host": [
						"{{TARGET_URL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Call external api",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Call external api => Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Call external api => check name and username\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect('Mock name').to.eql(jsonData.name);",
							"    pm.expect('Mock username').to.eql(jsonData.username);",
							"});",
							"",
							"",
							"pm.test(\"Call external api => Response body has the correct schema\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      id: {",
							"        type: \"number\"",
							"      },",
							"      name: {",
							"        type: \"string\"",
							"      },",
							"      username: {",
							"        type: \"string\"",
							"      },",
							"      email: {",
							"        type: \"string\",",
							"        format: \"email\"",
							"      },",
							"      address: {",
							"        type: \"object\",",
							"        properties: {",
							"          street: {",
							"            type: \"string\"",
							"          },",
							"          suite: {",
							"            type: \"string\"",
							"          },",
							"          city: {",
							"            type: \"string\"",
							"          },",
							"          zipcode: {",
							"            type: \"string\"",
							"          },",
							"          geo: {",
							"            type: \"object\",",
							"            properties: {",
							"              lat: {",
							"                type: \"string\"",
							"              },",
							"              lng: {",
							"                type: \"string\"",
							"              }",
							"            },",
							"            required: [\"lat\", \"lng\"]",
							"          }",
							"        },",
							"        required: [\"street\", \"suite\", \"city\", \"zipcode\", \"geo\"]",
							"      },",
							"      phone: {",
							"        type: \"string\"",
							"      },",
							"      website: {",
							"        type: \"string\"",
							"      },",
							"      company: {",
							"        type: \"object\",",
							"        properties: {",
							"          name: {",
							"            type: \"string\"",
							"          },",
							"          catchPhrase: {",
							"            type: \"string\"",
							"          },",
							"          bs: {",
							"            type: \"string\"",
							"          }",
							"        },",
							"        required: [\"name\", \"catchPhrase\", \"bs\"]",
							"      }",
							"    },",
							"    required: [\"id\", \"name\", \"username\", \"email\", \"address\", \"phone\", \"website\", \"company\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{TARGET_URL}}/call",
					"host": [
						"{{TARGET_URL}}"
					],
					"path": [
						"call"
					]
				}
			},
			"response": [
				{
					"name": "success",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{TARGET_URL}}/call",
							"host": [
								"{{TARGET_URL}}"
							],
							"path": [
								"call"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sun, 24 Sep 2023 04:37:40 GMT"
						},
						{
							"key": "Content-Length",
							"value": "410"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 1,\n    \"name\": \"Mock name\",\n    \"username\": \"Mock username\",\n    \"email\": \"MockSincere@april.biz\",\n    \"address\": {\n        \"street\": \"Kulas Light\",\n        \"suite\": \"Apt. 556\",\n        \"city\": \"Gwenborough\",\n        \"zipcode\": \"92998-3874\",\n        \"geo\": {\n            \"lat\": \"-37.3159\",\n            \"lng\": \"81.1496\"\n        }\n    },\n    \"phone\": \"1-770-736-8031 x56442\",\n    \"website\": \"hildegard.org\",\n    \"company\": {\n        \"name\": \"Romaguera-Crona\",\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\n        \"bs\": \"harness real-time e-markets\"\n    }\n}"
				}
			]
		},
		{
			"name": "Get all books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get all books => Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Get all books => check size of results = 3\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(3).to.eql(jsonData.length);",
							"});",
							"",
							"",
							"pm.test(\"Get all books => Response body structure is valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf.above(0);",
							"",
							"    jsonData.forEach(function(book) {",
							"        pm.expect(book).to.be.an('object').that.has.all.keys('id', 'title', 'author');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{TARGET_URL}}/books",
					"host": [
						"{{TARGET_URL}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"5\",\n    \"title\": \"test title 5\",\n    \"author\": \"test author 5\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{TARGET_URL}}/books",
					"host": [
						"{{TARGET_URL}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		}
	]
}